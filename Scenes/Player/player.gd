extends CharacterBody2D

# ---- Config ----
const GRAVITY = 1200
const MOVE_SPEED = 200
const JUMP_VELOCITY_MIN = -300   # ‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡πÄ‡∏ö‡∏≤‡∏™‡∏∏‡∏î
const JUMP_VELOCITY_MAX = -600   # ‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡πÅ‡∏£‡∏á‡∏™‡∏∏‡∏î
const MAX_CHARGE_TIME = 1.0      # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

# ---- State ----
var jump_charge := 0.0
var is_charging := false

func _physics_process(delta):
	# ‡πÅ‡∏£‡∏á‡πÇ‡∏ô‡πâ‡∏°‡∏ñ‡πà‡∏ß‡∏á
	if not is_on_floor():
		velocity.y += GRAVITY * delta

	# ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏ß‡∏≤
	var input_dir = Input.get_axis("Move_Left", "Move_Right")
	velocity.x = input_dir * MOVE_SPEED

	# ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° jump (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ä‡∏≤‡∏£‡πå‡∏à)
	if Input.is_action_just_pressed("Jump") and is_on_floor():
		is_charging = true
		jump_charge = 0.0
		print("‚ö° Start charging jump")

	# ‡∏Ñ‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° jump (‡πÄ‡∏Å‡πá‡∏ö charge)
	if is_charging and Input.is_action_pressed("Jump"):
		jump_charge = clamp(jump_charge + delta / MAX_CHARGE_TIME, 0.0, 1.0)
		print("‚è≥ Charging... ", jump_charge)

	# ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏õ‡∏∏‡πà‡∏° jump (‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î)
	if is_charging and Input.is_action_just_released("Jump"):
		do_charged_jump()
		is_charging = false
		jump_charge = 0.0

	move_and_slide()

func do_charged_jump():
	# Interpolate ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á MIN ‡πÅ‡∏•‡∏∞ MAX ‡∏ï‡∏≤‡∏° charge
	var jump_velocity = lerp(JUMP_VELOCITY_MIN, JUMP_VELOCITY_MAX, jump_charge)
	velocity.y = jump_velocity
	print("üöÄ Jump! charge=", jump_charge, " | velocity.y=", velocity.y)
